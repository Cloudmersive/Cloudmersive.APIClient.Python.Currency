# coding: utf-8

"""
    currencyapi

    The currency APIs help you retrieve exchange rates and convert prices between currencies easily.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConvertedCurrencyResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'converted_price': 'float',
        'iso_currency_code': 'str',
        'currency_symbol': 'str',
        'formatted_price_as_string': 'str'
    }

    attribute_map = {
        'converted_price': 'ConvertedPrice',
        'iso_currency_code': 'ISOCurrencyCode',
        'currency_symbol': 'CurrencySymbol',
        'formatted_price_as_string': 'FormattedPriceAsString'
    }

    def __init__(self, converted_price=None, iso_currency_code=None, currency_symbol=None, formatted_price_as_string=None):  # noqa: E501
        """ConvertedCurrencyResult - a model defined in Swagger"""  # noqa: E501

        self._converted_price = None
        self._iso_currency_code = None
        self._currency_symbol = None
        self._formatted_price_as_string = None
        self.discriminator = None

        if converted_price is not None:
            self.converted_price = converted_price
        if iso_currency_code is not None:
            self.iso_currency_code = iso_currency_code
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if formatted_price_as_string is not None:
            self.formatted_price_as_string = formatted_price_as_string

    @property
    def converted_price(self):
        """Gets the converted_price of this ConvertedCurrencyResult.  # noqa: E501

        The converted price in the destination currency  # noqa: E501

        :return: The converted_price of this ConvertedCurrencyResult.  # noqa: E501
        :rtype: float
        """
        return self._converted_price

    @converted_price.setter
    def converted_price(self, converted_price):
        """Sets the converted_price of this ConvertedCurrencyResult.

        The converted price in the destination currency  # noqa: E501

        :param converted_price: The converted_price of this ConvertedCurrencyResult.  # noqa: E501
        :type: float
        """

        self._converted_price = converted_price

    @property
    def iso_currency_code(self):
        """Gets the iso_currency_code of this ConvertedCurrencyResult.  # noqa: E501

        ISO 4217 currency three-letter code of destination price  # noqa: E501

        :return: The iso_currency_code of this ConvertedCurrencyResult.  # noqa: E501
        :rtype: str
        """
        return self._iso_currency_code

    @iso_currency_code.setter
    def iso_currency_code(self, iso_currency_code):
        """Sets the iso_currency_code of this ConvertedCurrencyResult.

        ISO 4217 currency three-letter code of destination price  # noqa: E501

        :param iso_currency_code: The iso_currency_code of this ConvertedCurrencyResult.  # noqa: E501
        :type: str
        """

        self._iso_currency_code = iso_currency_code

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this ConvertedCurrencyResult.  # noqa: E501

        Destination currency symbol  # noqa: E501

        :return: The currency_symbol of this ConvertedCurrencyResult.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this ConvertedCurrencyResult.

        Destination currency symbol  # noqa: E501

        :param currency_symbol: The currency_symbol of this ConvertedCurrencyResult.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def formatted_price_as_string(self):
        """Gets the formatted_price_as_string of this ConvertedCurrencyResult.  # noqa: E501

        Formatted price in the destination currency as a string  # noqa: E501

        :return: The formatted_price_as_string of this ConvertedCurrencyResult.  # noqa: E501
        :rtype: str
        """
        return self._formatted_price_as_string

    @formatted_price_as_string.setter
    def formatted_price_as_string(self, formatted_price_as_string):
        """Sets the formatted_price_as_string of this ConvertedCurrencyResult.

        Formatted price in the destination currency as a string  # noqa: E501

        :param formatted_price_as_string: The formatted_price_as_string of this ConvertedCurrencyResult.  # noqa: E501
        :type: str
        """

        self._formatted_price_as_string = formatted_price_as_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertedCurrencyResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertedCurrencyResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
