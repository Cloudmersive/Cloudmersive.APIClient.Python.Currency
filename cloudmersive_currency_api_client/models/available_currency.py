# coding: utf-8

"""
    currencyapi

    The currency APIs help you retrieve exchange rates and convert prices between currencies easily.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AvailableCurrency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iso_currency_code': 'str',
        'currency_symbol': 'str',
        'currency_english_name': 'str',
        'country_name': 'str',
        'country_three_letter_code': 'str',
        'country_iso_two_letter_code': 'str',
        'is_european_union_member': 'bool'
    }

    attribute_map = {
        'iso_currency_code': 'ISOCurrencyCode',
        'currency_symbol': 'CurrencySymbol',
        'currency_english_name': 'CurrencyEnglishName',
        'country_name': 'CountryName',
        'country_three_letter_code': 'CountryThreeLetterCode',
        'country_iso_two_letter_code': 'CountryISOTwoLetterCode',
        'is_european_union_member': 'IsEuropeanUnionMember'
    }

    def __init__(self, iso_currency_code=None, currency_symbol=None, currency_english_name=None, country_name=None, country_three_letter_code=None, country_iso_two_letter_code=None, is_european_union_member=None):  # noqa: E501
        """AvailableCurrency - a model defined in Swagger"""  # noqa: E501

        self._iso_currency_code = None
        self._currency_symbol = None
        self._currency_english_name = None
        self._country_name = None
        self._country_three_letter_code = None
        self._country_iso_two_letter_code = None
        self._is_european_union_member = None
        self.discriminator = None

        if iso_currency_code is not None:
            self.iso_currency_code = iso_currency_code
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if currency_english_name is not None:
            self.currency_english_name = currency_english_name
        if country_name is not None:
            self.country_name = country_name
        if country_three_letter_code is not None:
            self.country_three_letter_code = country_three_letter_code
        if country_iso_two_letter_code is not None:
            self.country_iso_two_letter_code = country_iso_two_letter_code
        if is_european_union_member is not None:
            self.is_european_union_member = is_european_union_member

    @property
    def iso_currency_code(self):
        """Gets the iso_currency_code of this AvailableCurrency.  # noqa: E501

        ISO 4217 currency three-letter code associated with the country  # noqa: E501

        :return: The iso_currency_code of this AvailableCurrency.  # noqa: E501
        :rtype: str
        """
        return self._iso_currency_code

    @iso_currency_code.setter
    def iso_currency_code(self, iso_currency_code):
        """Sets the iso_currency_code of this AvailableCurrency.

        ISO 4217 currency three-letter code associated with the country  # noqa: E501

        :param iso_currency_code: The iso_currency_code of this AvailableCurrency.  # noqa: E501
        :type: str
        """

        self._iso_currency_code = iso_currency_code

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this AvailableCurrency.  # noqa: E501

        Symbol associated with the currency  # noqa: E501

        :return: The currency_symbol of this AvailableCurrency.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this AvailableCurrency.

        Symbol associated with the currency  # noqa: E501

        :param currency_symbol: The currency_symbol of this AvailableCurrency.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def currency_english_name(self):
        """Gets the currency_english_name of this AvailableCurrency.  # noqa: E501

        Full name of the currency  # noqa: E501

        :return: The currency_english_name of this AvailableCurrency.  # noqa: E501
        :rtype: str
        """
        return self._currency_english_name

    @currency_english_name.setter
    def currency_english_name(self, currency_english_name):
        """Sets the currency_english_name of this AvailableCurrency.

        Full name of the currency  # noqa: E501

        :param currency_english_name: The currency_english_name of this AvailableCurrency.  # noqa: E501
        :type: str
        """

        self._currency_english_name = currency_english_name

    @property
    def country_name(self):
        """Gets the country_name of this AvailableCurrency.  # noqa: E501

        Name of the country  # noqa: E501

        :return: The country_name of this AvailableCurrency.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this AvailableCurrency.

        Name of the country  # noqa: E501

        :param country_name: The country_name of this AvailableCurrency.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def country_three_letter_code(self):
        """Gets the country_three_letter_code of this AvailableCurrency.  # noqa: E501

        Three-letter ISO 3166-1 country code  # noqa: E501

        :return: The country_three_letter_code of this AvailableCurrency.  # noqa: E501
        :rtype: str
        """
        return self._country_three_letter_code

    @country_three_letter_code.setter
    def country_three_letter_code(self, country_three_letter_code):
        """Sets the country_three_letter_code of this AvailableCurrency.

        Three-letter ISO 3166-1 country code  # noqa: E501

        :param country_three_letter_code: The country_three_letter_code of this AvailableCurrency.  # noqa: E501
        :type: str
        """

        self._country_three_letter_code = country_three_letter_code

    @property
    def country_iso_two_letter_code(self):
        """Gets the country_iso_two_letter_code of this AvailableCurrency.  # noqa: E501

        Two-letter ISO 3166-1 country code  # noqa: E501

        :return: The country_iso_two_letter_code of this AvailableCurrency.  # noqa: E501
        :rtype: str
        """
        return self._country_iso_two_letter_code

    @country_iso_two_letter_code.setter
    def country_iso_two_letter_code(self, country_iso_two_letter_code):
        """Sets the country_iso_two_letter_code of this AvailableCurrency.

        Two-letter ISO 3166-1 country code  # noqa: E501

        :param country_iso_two_letter_code: The country_iso_two_letter_code of this AvailableCurrency.  # noqa: E501
        :type: str
        """

        self._country_iso_two_letter_code = country_iso_two_letter_code

    @property
    def is_european_union_member(self):
        """Gets the is_european_union_member of this AvailableCurrency.  # noqa: E501

        True if this country is currently a member of the European Union (EU), false otherwise  # noqa: E501

        :return: The is_european_union_member of this AvailableCurrency.  # noqa: E501
        :rtype: bool
        """
        return self._is_european_union_member

    @is_european_union_member.setter
    def is_european_union_member(self, is_european_union_member):
        """Sets the is_european_union_member of this AvailableCurrency.

        True if this country is currently a member of the European Union (EU), false otherwise  # noqa: E501

        :param is_european_union_member: The is_european_union_member of this AvailableCurrency.  # noqa: E501
        :type: bool
        """

        self._is_european_union_member = is_european_union_member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailableCurrency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableCurrency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
